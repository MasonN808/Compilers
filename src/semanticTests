{
 int a
 boolean b
 {
 string c
 a = 5
 b = true /* no comment */
 c = "inta"
 print(c)
 }
 print(b)
 print(a)
}$



{
 int a {
 a = 1 }
 print("hi there")
}$



{
 int a {
 boolean b {
 string c {
 a = 5
 b = false
 c = "inta" }
 print(c) }
 print(b) }
 print(a)
}$


/* test cases from hall of fame projects below */


/* Obviously missing variable declarations, but still a good test for your tree.  Also has long integer expressions*/
  {
    {
        x = 1 + 2 + 3
          y = 6 + 7
          p = 1
          o = 9 + 8
          w = 4 + 5 + 0
      }

    a = 1
    b = 1 + 2
      c = 3 + 4 + 5
      d = 5 + 6 + 7
      e = 7 + 8
      f = 9

      {
        z = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 9
      }
  }$



  /* Variables being used but not declared first */
  {
  int a
  b = 4
  }$



  /* Variables being declared again in same scope*/
  {
  int a
  {
  string a
  a = "this is fine"
  }
  boolean a /* this is not fine" */
  }$



  /* A variable's type is not compatible with its assignment*/
  {
  string s
  s = 4 + 3
  }$



  /* Types do not match in Boolean comparison*/
  {
  int a
  a = 1
  print(a)
  if(4 == false){
  print("this no good")
  }
  if(4 == "hey"){
  print("int to string")
  }
  if(false != "hey"){
  print("bool to string")
  }
  if(4 != 3){
  print("int to int")
  }
  }$


  /* A digit is added to something other than a digit */
  {
  int a
  a = 4 + false
  }$

  /* Obviously missing varible decalarations, but still a good test for your tree */
    {
      {
          x = "abc"
            y = "e"
            p = "fghijklm"
            o = "nop"
            w = "qrstuvwxyz"
        }

      a = "qrstuvwxyz"
      b = "nop"
        c = "e"
        d = "fghijklm"
        e = "abc"
        f = "z"
        {
          z = "abcdefghijklmnopqrstuvwxyz"
        }
    }$



/* Semantically incorrect, but make sure your AST structure is correct */
{
  /* This is technically syntactically correct, though semantically is full of issues */
  r = 1 + (true == (1 != "hi"))
  /* Testing scopes as well... */
{
    x = "abc"
      y = "e"
      p = 1 + true
      w = "qrstuvwxyz"
      /* How 'bout another scope? */
      {
          x = 1 + 2 + 3
          y = 6 + 7
          p = 1

          /* Tricky, but syntactically valid */
          o = 9 + (false != ("a" == "a"))
          w = 4 + 5 + 0
      }
  }

  a = 1
b = 1 + 2
a = "qrstuvwxyz"
  d = "fghijklm"
  e = "abc"
  f = "z"
  d = 5 + 6 + 7
  e = 7 + 8
  /* Has your computer blown up yet? */
  {
      /* Some easy tests now */
    z = "abcdefghijklmnopqrstuvwxyz"
      z = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 9
      z = (true == (false == ("a" != "b")))
  }
}$

{
z = ("true" == (false == ("a" != "b")))
}$

{
z = (true == (false == ("a" != "b")))
}$

